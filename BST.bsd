::#add_node, (self, data) => run{lore:: <=(data [self][data]),
    ([lore]? ::child [self][left] : ::child [self][right]),
    (!= ([0] [child])? [self][add_node]([child], [data]) : (::new node(data),
    [new][parent] = [self],
    [lore]? [self][left] = new : [self][right] = new))}->[Node][add_node]

::#contains_node, (self, data) =>  run{contained:: or(==([self] [0])) ? [self] :  <=(data, [self][data]) ? [self][contains_node([self][left] [data]) : [self][contains_node([self][right] [data])} -> [Node][contains_node]
        //::#delete_node, (self, data) => run{ } ->[Node][delete_node]
::_transplant, (u, v) => run{ ==([u] [u][parent][left])? [u][p][left] = [v] : [u][p][right] = [v], !=(v [0])? [v][parent] = [u][parent] }


::#minimum, (x) => run{!=([x][left] [0])? min:: [BST][minimum]([x][left]) : min::[x] }
::#transplant, (self, u, v) => run{!=([u][parent] [0])? [self][root] = [v] : [self][root][_transplant](u, v)}->[BST][transplant]
::#delete, (self, z) => run{!=( [z][left] [0]) ? [self][transplant]([self], [z], [z][right]) : (==([z] [0]) ? [self][transplant]([self], [z], [z][right])) : y::[self][minimum]([z][right]),
                                                                                                                                                                (!=([y][p] [z]))? ([self][transplant]([y] [y][right]), 
                                                                                                                                                                [y][right] = [z][right],
                                                                                                                                                                [y][right][parent] = [y]
                                                                                                                                                                ): (
                                                                                                                                                                    [self][transplant](self, [y], [y][right]),
                                                                                                                                                                    [y][left] = [z][left],
                                                                                                                                                                    [y][left][parent] = [y]
                                                                                                                                                                )
                                                                                                                                                                } -> [BST][delete]

::Node, impl (data) => {left::[0] right::[0] parent::[0] key::[data] add_node::[0]}
::BST, impl (data) => {root::[0] add::[0] contains::[0] delete::[0] transplant::[0] minimum::[0]}
