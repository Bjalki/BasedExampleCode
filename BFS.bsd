----------------------------------------------------------------------------------------
Functions
----------------------------------------------------------------------------------------

::$bfs, impl(self s) => run{Q::store{}, d::0,
                            [s][visited] = #t,
                            [Q].add(s),
                            |while [Q].size != 1 : {
                               u::[Q].remove(1),
                               |[u][edges] : (e) => v::[e][v2], 
                                [v][visited] == #f ? [v][visited] = #t, [v][distance] = [d]+1, [Q].add([v])
                               | 
                                }, [d] = [d] + 1 |
 }

----------------------------------------------------------------------------------------
CLASSES
----------------------------------------------------------------------------------------

::Vertex,  impl () => {edges::store{} visited::#f distance::[0] }
::Edge, impl (v1 v2) => {v1::[v1] v2::[v2] }
::Graph, impl () => {verts::store{} bfs::bfs}

----------------------------------------------------------------------------------------
Main
----------------------------------------------------------------------------------------

::G, Graph()
::n, read()
::, |[n] : (n) => {[G][store].add(Vertex())}|
::running, #t
::nums, store{}
::, |while is_running : () => num::read(), (num != -1) ? add([nums] [num])|
::, | [nums] : (a b) =>  [[G][verts].get(a)][edges].add(Edge([G][verts].get(a) [G][verts].get(b))), [[G][verts].get(b)][edges].add(Edge([G][verts].get(b) [G][verts].get(a)))  |
::u, read()
::v, read()
::, [G][bfs]([G] [G][verts].get([u -1]))
::, write([G][verts][v - 1][distance])

----------------------------------------------------------------------------------------